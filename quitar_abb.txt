IVAN:
bool abb_quitar_r(nodo_t **nodo, void *buscado, void **encontrado,
		  int (*comparador)(void *, void *))
{
	if (*nodo == NULL) {
		return false;
	}

	int comparacion = comparador(buscado, (*nodo)->elemento);

	if (comparacion == 0) {
		if (encontrado != NULL) {
			*encontrado = (*nodo)->elemento;
		}

		// Nodo sin hijos
		if ((*nodo)->izq == NULL && (*nodo)->der == NULL) {
			free(*nodo);
			*nodo = NULL;
		}
		// Nodo con solo hijo derecho
		else if ((*nodo)->izq == NULL) {
			nodo_t *temp = *nodo;
			*nodo = (*nodo)->der;
			free(temp);
		}
		// Nodo con solo hijo izquierdo
		else if ((*nodo)->der == NULL) {
			nodo_t *temp = *nodo;
			*nodo = (*nodo)->izq;
			free(temp);
		}
		// Nodo con ambos hijos
		else {
			nodo_t *reemplazo = (*nodo)->izq;
			while (reemplazo->der != NULL) {
				reemplazo = reemplazo->der;
			}

			// Reemplazamos el nodo a eliminar con el nodo reemplazo
			(*nodo)->elemento = reemplazo->elemento;

			// Eliminamos recursivamente el nodo reemplazo
			return abb_quitar_r(&(*nodo)->izq, reemplazo->elemento,
					    NULL, comparador);
		}

		return true;
	}

	if (comparacion > 0) {
		return abb_quitar_r(&(*nodo)->der, buscado, encontrado,
				    comparador);
	} else {
		return abb_quitar_r(&(*nodo)->izq, buscado, encontrado,
				    comparador);
	}
}

bool abb_quitar(abb_t *abb, void *buscado, void **encontrado)
{
	if (abb == NULL) {
		return false;
	}

	bool se_elimino =
		abb_quitar_r(&abb->raiz, buscado, encontrado, abb->comparador);

	if (se_elimino) {
		abb->nodos--;
	}

	return se_elimino;
}

PROFE:
nodo_t *extraer_elemento_mas_derecho(nodo_t *nodo, void **elemento)
{
	if (nodo->der == NULL) {
		*elemento = nodo->elemento;
		nodo_t *izq = nodo->izq;
		free(nodo);
		return izq;
	}
	nodo->der = extraer_elemento_mas_derecho(nodo->der, elemento);
	return nodo;
}

nodo_t *quitar_rec(nodo_t *nodo, void *elemento,
		   int (*comparador)(void *, void *), void **elem_extraido,
		   bool *se_elimino)
{
	if (nodo == NULL) {
		*se_elimino = false;
		return NULL;
	}

	int comparacion = comparador(elemento, nodo->elemento);

	if (comparacion < 0) {
		nodo->izq = quitar_rec(nodo->izq, elemento, comparador,
				       elem_extraido, se_elimino);
	} else if (comparacion > 0) {
		nodo->der = quitar_rec(nodo->der, elemento, comparador,
				       elem_extraido, se_elimino);
	} else {
		*elem_extraido = nodo->elemento;
		if (nodo->izq == NULL) {
			nodo_t *der = nodo->der;
			free(nodo);
			*se_elimino = true;
			return der;
		}
		if (nodo->der == NULL) {
			nodo_t *izq = nodo->izq;
			free(nodo);
			*se_elimino = true;
			return izq;
		}
		nodo->izq = extraer_elemento_mas_derecho(nodo->izq,
							 &nodo->elemento);
		*se_elimino = true;
	}
	return nodo;
}

bool abb_quitar(abb_t *abb, void *elemento, void **elem_extraido)
{
	if (!abb || !abb->raiz || !elem_extraido)
		return false;

	bool se_elimino = false;
	abb->raiz = quitar_rec(abb->raiz, elemento, abb->comparador,
			       elem_extraido, &se_elimino);

	if (se_elimino)
		abb->nodos--;

	return se_elimino;
}